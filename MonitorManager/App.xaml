<Application x:Class="MonitorManager.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:MonitorManager"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <!-- Background -->
        <Style x:Key="rootWindow" TargetType="{x:Type Grid}">
            <Setter Property="Background" Value="#CC1F1F1F"/>
            <Style.Triggers>
                <!--<DataTrigger Binding="{Binding Path=IsActive, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" Value="False">
                    <Setter Property="Background" Value="#ee282828"/>
                    <DataTrigger.EnterActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <ColorAnimation Storyboard.TargetProperty="(Button.Background).(SolidColorBrush.Color)" From="#D8282828" To="#EE282828" Duration="0:0:0.1"/>
                            </Storyboard>
                        </BeginStoryboard>
                    </DataTrigger.EnterActions>
                    <DataTrigger.ExitActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <ColorAnimation Storyboard.TargetProperty="(Button.Background).(SolidColorBrush.Color)" From="#EE282828" To="#D8282828" Duration="0:0:0.1"/>
                            </Storyboard>
                        </BeginStoryboard>
                    </DataTrigger.ExitActions>
                </DataTrigger>-->
            </Style.Triggers>
        </Style>


        <!-- Wait Message -->
        <Style x:Key="WaitMessage" TargetType="{x:Type Label}">
            <Setter Property="Opacity" Value="0"/>
            <Setter Property="Visibility" Value="Hidden"/>
        </Style>


        <!-- Focus Styles -->
        <Style x:Key="Focus">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle StrokeThickness="2" Stroke="#FFFFFF" SnapsToDevicePixels="true"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="FocusLarge">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="-8" StrokeThickness="2" Stroke="#FFFFFF" SnapsToDevicePixels="true"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
        <Style x:Key="FocusCheckBox">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="-7" StrokeThickness="2" Stroke="#FFFFFF" SnapsToDevicePixels="true"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <!-- Checkbox Styles -->
        <Style x:Key="CheckBox" TargetType="{x:Type CheckBox}">
            <Setter Property="SnapsToDevicePixels" Value="true"/>
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusCheckBox}"/>
            <Setter Property="Foreground" Value="#000"/>
            <Setter Property="Background" Value="#fff"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="CheckBox">
                        <BulletDecorator Background="Transparent">
                            <BulletDecorator.Bullet>
                                <Border x:Name="Border" Width="20" Height="20" CornerRadius="0" Background="#FFFFFF" BorderBrush="#CC000000" BorderThickness="2">
                                    <Path x:Name="CheckMark" Fill="White" Data="M0 7.6L5.5 13M16 2.8L5.5 13 M15 2.5L5.5 12 0 6.5v2L5.5 14 16 3.6z"/>
                                </Border>
                            </BulletDecorator.Bullet>
                            <ContentPresenter Margin="8,-3,0,0" VerticalAlignment="Center" HorizontalAlignment="Left" RecognizesAccessKey="True"/>
                        </BulletDecorator>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="false">
                                <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter TargetName="Border" Property="Background" Value="{DynamicResource GlassBrush}"/>
                                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource GlassBrush}"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="{x:Null}">
                                <Setter TargetName="Border" Property="Background" Value="{DynamicResource GlassBrush}"/>
                                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource GlassBrush}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter TargetName="Border" Property="BorderBrush" Value="#000"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter TargetName="Border" Property="Background" Value="#99000000"/>
                                <Setter TargetName="Border" Property="BorderBrush" Value="#99000000"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="#CCC"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="MenuCheckBox" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource CheckBox}">
            <Setter Property="Focusable" Value="{Binding ElementName=btnMenuClose, Path=Focusable}"/>
        </Style>


        <!-- Titlebar Buttons -->
        <Style x:Key="ButtonMinimize" TargetType="{x:Type Button}">
            <Setter Property="Background" Value="#00000000"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" BorderBrush="Black" BorderThickness="0">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=IsActive, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" Value="False">
                    <Setter Property="Foreground" Value="#80FFFFFF"/>
                </DataTrigger>
                <Trigger Property="IsFocused" Value="True">
                    <Setter Property="Background" Value="#20FFFFFF"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#20FFFFFF"/>
                    <Setter Property="Foreground" Value="White"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Background" Value="#30FFFFFF"/>
                </Trigger>
                <EventTrigger RoutedEvent="MouseLeave">
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation Storyboard.TargetProperty="(Button.Background).(SolidColorBrush.Color)" From="#20FFFFFF" To="#00FFFFFF" Duration="0:0:0.2"/>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="ButtonClose" TargetType="{x:Type Button}">
            <Setter Property="Background" Value="#00000000"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" BorderBrush="Black" BorderThickness="0">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=IsActive, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" Value="False">
                    <Setter Property="Foreground" Value="#80FFFFFF"/>
                </DataTrigger>
                <Trigger Property="IsFocused" Value="True">
                    <Setter Property="Background" Value="#E81123"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#E81123"/>
                    <Setter Property="Foreground" Value="White"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Background" Value="#F1707A"/>
                    <!--<Setter Property="Foreground" Value="black"/>-->
                </Trigger>
                <EventTrigger RoutedEvent="MouseLeave">
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation Storyboard.TargetProperty="(Button.Background).(SolidColorBrush.Color)" From="#e81123" To="#00000000" Duration="0:0:0.2"/>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
            </Style.Triggers>
        </Style>


        <!-- Buttons -->
        <Style x:Key="IconButton" TargetType="{x:Type Button}">
            <Setter Property="Background" Value="#33FFFFFF"/>
            <Setter Property="FocusVisualStyle" Value="{DynamicResource Focus}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Name="border" Background="{TemplateBinding Background}" BorderBrush="#33FFFFFF" BorderThickness="2">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="border" Property="BorderBrush" Value="#66FFFFFF"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="border" Property="BorderBrush" Value="#66FFFFFF"/>
                                <Setter Property="Background" Value="#66FFFFFF"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="MainIconButton" TargetType="{x:Type Button}" BasedOn="{StaticResource IconButton}">
            <Setter Property="Focusable" Value="{Binding ElementName=btnMenu, Path=Focusable}"/>
        </Style>

        <Style x:Key="MessageIconButton" TargetType="{x:Type Button}" BasedOn="{StaticResource IconButton}">
            <Setter Property="Focusable" Value="{Binding ElementName=btnThisSceenConfirmationCancel, Path=Focusable}"/>
        </Style>

        <!-- Buttons -->
        <Style x:Key="IconButtonAlt" TargetType="{x:Type Button}">
            <Setter Property="Background" Value="#00FFFFFF"/>
            <Setter Property="FocusVisualStyle" Value="{DynamicResource Focus}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Name="border" Background="{TemplateBinding Background}" BorderBrush="#33FFFFFF" BorderThickness="0">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#33FFFFFF"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="#66FFFFFF"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="MainIconButtonAlt" TargetType="{x:Type Button}" BasedOn="{StaticResource IconButtonAlt}">
            <Setter Property="Focusable" Value="{Binding ElementName=btnMenu, Path=Focusable}"/>
        </Style>
        
        <Style x:Key="MenuIconButtonAlt" TargetType="{x:Type Button}" BasedOn="{StaticResource IconButtonAlt}">
            <Setter Property="Focusable" Value="{Binding ElementName=btnMenuClose, Path=Focusable}"/>
        </Style>


        <!-- Sliders -->
        <Style x:Key="SliderRepeatLeft" TargetType="RepeatButton">
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="SnapsToDevicePixels" Value="true"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="RepeatButton">
                        <Border Name="sliderleft" BorderThickness="0,11,0,11" Background="White" BorderBrush="#00000000" Height="24">
                            <Grid Name="sliderleftgrid" Background="{DynamicResource GlassBrush}" Opacity="0.7"></Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <DataTrigger Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Slider}}}" Value="False">
                                <Setter TargetName="sliderleft" Property="Background" Value="#26FFFFFF"/>
                                <Setter TargetName="sliderleftgrid" Property="Background" Value="#26FFFFFF"/>
                                <Setter TargetName="sliderleftgrid" Property="Opacity" Value="1"/>
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="SliderRepeatRight" TargetType="RepeatButton">
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="SnapsToDevicePixels" Value="true"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="RepeatButton">
                        <Border Name="sliderright" Background="#66FFFFFF" BorderThickness="0,11,0,11" BorderBrush="#00000000" Height="24"/>
                        <ControlTemplate.Triggers>
                            <DataTrigger Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Slider}}}" Value="False">
                                <Setter TargetName="sliderright" Property="Background" Value="#26FFFFFF"/>
                                <Setter TargetName="sliderright" Property="Margin" Value="-8,0,0,0"/>
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="SliderThumb" TargetType="Thumb">
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="SnapsToDevicePixels" Value="true"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Thumb">
                        <Rectangle Name="thumb" Fill="{DynamicResource GlassBrush}" Width="8" Height="24" RadiusX="4" RadiusY="4"/>
                        <ControlTemplate.Triggers>
                            <DataTrigger Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Slider}}}" Value="True">
                                <Setter TargetName="thumb" Property="Fill" Value="#FFFFFF"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Slider}}}" Value="False">
                                <Setter TargetName="thumb" Property="Fill" Value="#26FFFFFF"/>
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <ControlTemplate x:Key="SliderTrack" TargetType="Slider">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Track Grid.Row="1" x:Name="PART_Track">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Style="{StaticResource SliderRepeatLeft}"  Command="Slider.DecreaseLarge"/>
                    </Track.DecreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb Style="{StaticResource SliderThumb}"/>
                    </Track.Thumb>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Style="{StaticResource SliderRepeatRight}" Command="Slider.IncreaseLarge"/>
                    </Track.IncreaseRepeatButton>
                </Track>
            </Grid>
        </ControlTemplate>

        <Style x:Key="Slider" TargetType="{x:Type Slider}">
            <Setter Property="Focusable" Value="True"/>
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="SnapsToDevicePixels" Value="true"/>
            <Setter Property="FocusVisualStyle" Value="{DynamicResource FocusLarge}"/>
            <Style.Triggers>
                <Trigger Property="Orientation" Value="Horizontal">
                    <Setter Property="MinHeight" Value="20"/>
                    <Setter Property="MinWidth" Value="104"/>
                    <Setter Property="Template" Value="{StaticResource SliderTrack}"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="MinHeight" Value="20"/>
                    <Setter Property="MinWidth" Value="104"/>
                    <Setter Property="Template" Value="{StaticResource SliderTrack}"/>
                </Trigger>
            </Style.Triggers>
        </Style>


        <!-- Context Menus -->
        <Style TargetType="{x:Type MenuItem}">
            <Setter Property="HorizontalContentAlignment" Value="Left"/>
            <Setter Property="VerticalContentAlignment" Value="Top"/>
        </Style>


        <!-- Combo Box -->
        <SolidColorBrush x:Key="ComboBoxBackground" Color="#66000000"/>
        <SolidColorBrush x:Key="ComboBoxBorder" Color="#66FFFFFF"/>
        <SolidColorBrush x:Key="ComboBoxShape" Color="#A5FFFFFF"/>
        <SolidColorBrush x:Key="ComboBoxHoverBackground" Color="#99000000"/>
        <SolidColorBrush x:Key="ComboBoxHoverBorder" Color="#99FFFFFF"/>
        <SolidColorBrush x:Key="ComboBoxDisabledBackground" Color="#EEE"/>
        <SolidColorBrush x:Key="ComboBoxDisabledBorder" Color="#888"/>
        <SolidColorBrush x:Key="ComboBoxDisabledForeground" Color="#888"/>
        <SolidColorBrush x:Key="ComboBoxDisabledShape" Color="#888"/>
        <SolidColorBrush x:Key="ComboBoxItemBackground" Color="#66000000"/>
        <SolidColorBrush x:Key="ComboBoxItemFocusedBackground" Color="#404040"/>
        <SolidColorBrush x:Key="ComboBoxItemHoverBackground" Color="#404040"/>
        <SolidColorBrush x:Key="Clear" Color="#00FFFFFF"/>
        <SolidColorBrush x:Key="DropDownBackground" Color="#2B2B2B"/>
        <SolidColorBrush x:Key="DropDownBorder" Color="#767676"/>

        <Style x:Key="ComboBoxItem" TargetType="{x:Type ComboBoxItem}">
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="FocusVisualStyle" Value="{DynamicResource Focus}"/>
            <Setter Property="Height" Value="32"/>
            <Setter Property="Padding" Value="11,0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                        <Border x:Name="Bd" SnapsToDevicePixels="true" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsFocused" Value="true">
                                <Setter Property="Background" Value="{StaticResource ComboBoxItemFocusedBackground}"/>
                            </Trigger>
                            <Trigger Property="IsSelected" Value="true">
                                <Setter Property="Background" Value="{DynamicResource GlassBrush60}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" Value="{StaticResource ComboBoxItemHoverBackground}"/>
                            </Trigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True"/>
                                    <Condition Binding="{Binding IsFocused, RelativeSource={RelativeSource Self}}" Value="True"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" Value="{DynamicResource GlassBrush80}"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True"/>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" Value="{DynamicResource GlassBrush80}"/>
                            </MultiDataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="ComboBoxFlatStyle" TargetType="{x:Type ComboBox}">
            <Setter Property="FocusVisualStyle" Value="{DynamicResource Focus}"/>
            <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True"/>
            <Setter Property="ItemContainerStyle" Value="{StaticResource ComboBoxItem}"/>
            <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
            <Setter Property="TextElement.Foreground" Value="Black"/>
            <Setter Property="UIElement.SnapsToDevicePixels" Value="True"/>
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ComboBox">
                        <Grid>
                            <Grid>
                                <ToggleButton Name="ToggleButton" Grid.Column="2" ClickMode="Release" Focusable="False" IsChecked="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}">
                                    <ToggleButton.Template>
                                    <ControlTemplate TargetType="ToggleButton">
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition/>
                                                <ColumnDefinition Width="32"/>
                                            </Grid.ColumnDefinitions>
                                            <Border Name="Border" Grid.ColumnSpan="2" BorderBrush="{StaticResource ComboBoxBorder}" BorderThickness="2" Background="{StaticResource ComboBoxBackground}"/>
                                            <Path Name="Arrow" Grid.Column="1" Data="M0 0v1l6 6 6-6V0h-1L6 5 1 0H0z" Fill="{StaticResource ComboBoxShape}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="UIElement.IsMouseOver" Value="True">
                                                <Setter Property="Background" TargetName="Border" Value="{StaticResource ComboBoxHoverBackground}"/>
                                                <Setter Property="BorderBrush" TargetName="Border" Value="{StaticResource ComboBoxHoverBorder}"/>
                                            </Trigger>
                                            <Trigger Property="ToggleButton.IsChecked" Value="True">
                                                <Setter Property="BorderBrush" TargetName="Border" Value="{StaticResource Clear}"/>
                                            </Trigger>
                                            <Trigger Property="UIElement.IsEnabled" Value="False">
                                                <Setter Property="Background" TargetName="Border" Value="{StaticResource ComboBoxDisabledBackground}"/>
                                                <Setter Property="Fill" TargetName="Arrow" Value="{StaticResource ComboBoxDisabledShape}"/>
                                                <Setter Property="Foreground" Value="{StaticResource ComboBoxDisabledForeground}"/>
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </ToggleButton.Template>
                                </ToggleButton>
                                <ContentPresenter Name="ContentSite" Margin="12,3,23,3" IsHitTestVisible="False" HorizontalAlignment="Left" VerticalAlignment="Center" Content="{TemplateBinding ComboBox.SelectionBoxItem}" ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"/>
                                <TextBox Name="PART_EditableTextBox" Margin="3,3,23,3" IsReadOnly="{TemplateBinding IsReadOnly}" Visibility="Hidden" Background="Transparent" HorizontalAlignment="Left" VerticalAlignment="Center" Focusable="True">
                                    <TextBox.Template>
                                        <ControlTemplate TargetType="TextBox">
                                            <Border Name="PART_ContentHost" Focusable="False"/>
                                        </ControlTemplate>
                                    </TextBox.Template>
                                </TextBox>
                            </Grid>
                            <!-- Popup showing items -->
                            <Popup Name="Popup" Placement="Relative" Focusable="False" AllowsTransparency="True" IsOpen="{TemplateBinding ComboBox.IsDropDownOpen}" VerticalOffset="{DynamicResource MinitorComboVertical}">
                                <Grid Name="DropDown" SnapsToDevicePixels="True" MinWidth="{TemplateBinding FrameworkElement.ActualWidth}" MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}">
                                    <Border Name="DropDownBorder" Background="{StaticResource DropDownBackground}" BorderBrush="{StaticResource DropDownBorder}" BorderThickness="1"/>
                                    <ScrollViewer Margin="1,8,1,8" SnapsToDevicePixels="True">
                                        <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained"/>
                                    </ScrollViewer>
                                </Grid>
                            </Popup>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="ItemsControl.HasItems" Value="False">
                                <Setter Property="FrameworkElement.MinHeight" TargetName="DropDownBorder" Value="95"/>
                            </Trigger>
                            <Trigger Property="UIElement.IsEnabled" Value="False">
                                <Setter Property="TextElement.Foreground" Value="{StaticResource ComboBoxDisabledForeground}"/>
                            </Trigger>
                            <Trigger Property="ItemsControl.IsGrouping" Value="True">
                                <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                            </Trigger>
                            <Trigger Property="ComboBox.IsEditable" Value="True">
                                <Setter Property="KeyboardNavigation.IsTabStop" Value="False"/>
                                <Setter Property="UIElement.Visibility" TargetName="PART_EditableTextBox" Value="Visible"/>
                                <Setter Property="UIElement.Visibility" TargetName="ContentSite" Value="Hidden"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="MainComboBoxFlatStyle" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource ComboBoxFlatStyle}">
            <Setter Property="Focusable" Value="{Binding ElementName=btnMenu, Path=Focusable}"/>
        </Style>

        <Style x:Key="MainSlider" TargetType="{x:Type Slider}" BasedOn="{StaticResource Slider}">
            <Setter Property="Focusable" Value="{Binding ElementName=btnMenu, Path=Focusable}"/>
        </Style>
        
        <Style x:Key="MenuHyperlink" TargetType="{x:Type Hyperlink}">
            <Setter Property="Focusable" Value="{Binding ElementName=btnMenuClose, Path=Focusable}"/>
        </Style>
    </Application.Resources>
</Application>
